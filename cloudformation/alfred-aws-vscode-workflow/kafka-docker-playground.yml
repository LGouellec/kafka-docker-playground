AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  AWS CloudFormation Template for kafka-docker-playground using a single EC2
  instance. **WARNING** This template creates an Amazon EC2 instance. You will
  be billed for the AWS resources used if you create a stack from this template.
Parameters:
  # LatestAmiId:
  #   Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
  #   Default: "/aws/service/ami-amazon-linux-latest/amzn2-ami-kernel-5.10-hvm-x86_64-gp2"
  LatestUbuntuFocalAMI:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: "/aws/service/canonical/ubuntu/server/focal/stable/current/amd64/hvm/ebs-gp2/ami-id"
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: 'AWS::EC2::KeyPair::KeyName'
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t3.2xlarge
    AllowedValues:
      - t1.micro
      - t2.nano
      - t2.micro
      - t2.small
      - t2.medium
      - t2.large
      - t3.2xlarge
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c1.medium
      - c1.xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - g2.2xlarge
      - g2.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
      - d2.xlarge
      - d2.2xlarge
      - d2.4xlarge
      - d2.8xlarge
      - hi1.4xlarge
      - hs1.8xlarge
      - cr1.8xlarge
      - cc2.8xlarge
      - cg1.4xlarge
    ConstraintDescription: must be a valid EC2 instance type.
  Ec2RootVolumeSize:
    Description: Ec2 root volume size
    Type: String
    Default: '300'
  InstanceName:
    Description: Instance Name
    Type: String
    Default: kafka-docker-playground
  IPAddressRange:
    Description: ' The IP address range that can be used to connect to the EC2 instances'
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: 0.0.0.0/0
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
  GithubSshKeyFile:
    Description: github_ssh_key_file
    Type: String
    Default: ''
    NoEcho: 'true'
  SecretsEncryptionPassword:
    Description: SECRETS_ENCRYPTION_PASSWORD
    Type: String
    Default: ''
    NoEcho: 'true'

Resources:
  AWSInstance:
    Type: 'AWS::EC2::Instance'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          InstallAndRun:
            - Install
            - Configure
        Install:
          files:
            /home/ubuntu/clone.sh:
              content:
                'Fn::Join':
                  - ''
                  - - >-
                      #!/bin/bash

                      set -e


                      # run as ubuntu

                      cat << EOF | su ubuntu

                      dockerd-rootless-setuptool.sh install

                      cd 

                      git clone https://github.com/robbyrussell/oh-my-zsh.git /home/ubuntu/.oh-my-zsh

                      cp /home/ubuntu/.oh-my-zsh/templates/zshrc.zsh-template /home/ubuntu/.zshrc

                      curl -fsSL https://starship.rs/install.sh -o install.sh 

                      sudo sh ./install.sh -y 

                      echo 'export PATH=$HOME/bin:/usr/local/bin:$PATH' >> ~/.zshrc

                      echo 'eval "\$(starship init zsh)"' >> ~/.zshrc

                      sudo chsh -s /bin/zsh 

                      echo "
                    - Ref: GithubSshKeyFile
                    - >-
                      " > /home/ubuntu/.ssh/id_rsa

                      chmod 600 /home/ubuntu/.ssh/id_rsa

                      ssh-keyscan -t rsa github.com >> /home/ubuntu/.ssh/known_hosts

                      git clone https://github.com/vdesabou/kafka-docker-playground.git



                      EOF
              mode: '000744'
              owner: ubuntu
              group: ubuntu
        Configure:
          commands:
            01update_pkgs:
              command: apt update -y
            02install_docker:
              command: >-
                apt install zip -y
                apt install zsh -y
                apt install jq -y
                apt install expect -y
                apt install docker.io -y
                apt install docker-compose -y
            03install_ansible:
              command: >-
                apt-add-repository ppa:ansible/ansible -y
                apt update -y
                apt install ansible -y
            05clone_repo:
              command: /home/ubuntu/clone.sh > /home/ubuntu/output.log 2>&1
    Properties:
      ImageId: !Ref LatestUbuntuFocalAMI
      InstanceType:
        Ref: InstanceType
      Tags:
        - Key: Name
          Value:
            Ref: InstanceName
      SecurityGroups:
        - Ref: KafkaDockerPlaygroundSecurityGroup
      KeyName:
        Ref: KeyName
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            DeleteOnTermination: 'true'
            VolumeSize:
              Ref: Ec2RootVolumeSize
    CreationPolicy:
      ResourceSignal:
        Timeout: PT30M
  KafkaDockerPlaygroundSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: Enable SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: '22'
          ToPort: '22'
          CidrIp:
            Ref: IPAddressRange
Outputs:
  ControlCenterURL:
    Description: URL for Control Center
    Value:
      'Fn::Join':
        - ''
        - - 'http://'
          - 'Fn::GetAtt':
              - AWSInstance
              - PublicDnsName
          - ':9021'
  GrafanaURL:
    Description: URL for Grafana
    Value:
      'Fn::Join':
        - ''
        - - 'http://'
          - 'Fn::GetAtt':
              - AWSInstance
              - PublicDnsName
          - ':3000'
  PrometheusURL:
    Description: URL for Prometheus
    Value:
      'Fn::Join':
        - ''
        - - 'http://'
          - 'Fn::GetAtt':
              - AWSInstance
              - PublicDnsName
          - ':9090'
  ConnectAPIURL:
    Description: URL for Connect API
    Value:
      'Fn::Join':
        - ''
        - - 'http://'
          - 'Fn::GetAtt':
              - AWSInstance
              - PublicDnsName
          - ':8083'
