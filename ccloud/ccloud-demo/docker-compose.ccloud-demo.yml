---
version: '3.5'
services:

  schema-registry:
    image: confluentinc/cp-schema-registry:${TAG}
    hostname: schema-registry
    container_name: schema-registry
    ports:
      - '8085:8085'
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8085
      SCHEMA_REGISTRY_KAFKASTORE_SSL_ENDPOINT_IDENTIFIED_ALGORITHM: "https"
      SCHEMA_REGISTRY_KAFKASTORE_REQUEST_TIMEOUT_MS: 20000
      SCHEMA_REGISTRY_KAFKASTORE_RETRY_BACKOFF_MS: 500
      SCHEMA_REGISTRY_KAFKASTORE_SECURITY_PROTOCOL: "SASL_SSL"
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: $BOOTSTRAP_SERVERS
      SCHEMA_REGISTRY_KAFKASTORE_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG
      SCHEMA_REGISTRY_KAFKASTORE_SASL_MECHANISM: "PLAIN"

  ksql-server:
    image: ${CP_KSQL_IMAGE}:${TAG}
    hostname: ksql-server
    container_name: ksql-server
    ports:
      - "8089:8089"
    profiles:
    - ksqldb
    environment:
      KSQL_HOST_NAME: ksql-server
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      KSQL_LISTENERS: "http://0.0.0.0:8089"
      KSQL_AUTO_OFFSET_RESET: "earliest"
      KSQL_COMMIT_INTERVAL_MS: 0
      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
      KSQL_KSQL_SCHEMA_REGISTRY_URL: $SCHEMA_REGISTRY_URL
      KSQL_KSQL_SCHEMA_REGISTRY_BASIC_AUTH_CREDENTIALS_SOURCE: $BASIC_AUTH_CREDENTIALS_SOURCE
      KSQL_KSQL_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: $SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO
      KSQL_BOOTSTRAP_SERVERS: $BOOTSTRAP_SERVERS
      KSQL_SECURITY_PROTOCOL: "SASL_SSL"
      KSQL_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG
      KSQL_SASL_MECHANISM: "PLAIN"
      KSQL_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: "HTTPS"
      KSQL_KSQL_STREAMS_PRODUCER_RETRIES: 2147483647
      KSQL_KSQL_STREAMS_PRODUCER_CONFLUENT_BATCH_EXPIRE_MS: 9223372036854775807
      KSQL_KSQL_STREAMS_PRODUCER_REQUEST_TIMEOUT_MS: 300000
      KSQL_KSQL_STREAMS_PRODUCER_MAX_BLOCK_MS: 9223372036854775807
      KSQL_KSQL_STREAMS_PRODUCER_DELIVERY_TIMEOUT_MS: 2147483647
      KSQL_KSQL_STREAMS_REPLICATION_FACTOR: 3
      KSQL_KSQL_INTERNAL_TOPIC_REPLICAS: 3
      KSQL_KSQL_SINK_REPLICAS: 3
      # Producer Confluent Monitoring Interceptors for Control Center streams monitoring
      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KSQL_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: PLAIN
      KSQL_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: "SASL_SSL"
      KSQL_PRODUCER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG
      # Consumer Confluent Monitoring Interceptors for Control Center streams monitoring
      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KSQL_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: PLAIN
      KSQL_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: "SASL_SSL"
      KSQL_CONSUMER_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG

  ksql-cli:
    image: ${CP_KSQL_CLI_IMAGE}
    container_name: ksql-cli
    entrypoint: /bin/sh
    tty: true
    profiles:
    - ksqldb

  mysql:
    image: mysql:5.7
    hostname: mysql
    container_name: mysql
    volumes:
      - ../../connect/connect-jdbc-mysql-source/mysql-init.sql:/docker-entrypoint-initdb.d/mysql-init.sql
    environment:
      MYSQL_ROOT_PASSWORD: password
      MYSQL_DATABASE: db
      MYSQL_USER: user
      MYSQL_PASSWORD: password
      MYSQL_ROOT_HOST: 172.%  # Allow docker containers to connect to mysql

  elasticsearch:
    image: elasticsearch:7.12.0
    hostname: elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      discovery.type: single-node
      
  connect:
    depends_on:
      - schema-registry
      - mysql
      - http-service-basic-auth
    ulimits:
      nofile:
        soft: 100000
        hard: 100000
    volumes:
      - ../../ccloud/ccloud-demo/mysql-connector-java-5.1.45.jar:/usr/share/confluent-hub-components/confluentinc-kafka-connect-jdbc/lib/mysql-connector-java-5.1.45.jar
      - ../../ccloud/ccloud-demo/jmx-exporter:/usr/share/jmx_exporter/
      - ../../ccloud/environment/data:/data
    environment:
      CONNECT_PLUGIN_PATH: /usr/share/confluent-hub-components/confluentinc-kafka-connect-elasticsearch,/usr/share/confluent-hub-components/confluentinc-kafka-connect-http,/usr/share/confluent-hub-components/confluentinc-kafka-connect-jdbc
      KAFKA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.12.0.jar=1234:/usr/share/jmx_exporter/kafka-connect.yml
      # # https://kafka-docker-playground.io/#/reusables?id=âœ¨-remote-debugging
      # KAFKA_DEBUG: 'true'
      # # With JDK9+, need to specify address=*:5005, see https://www.baeldung.com/java-application-remote-debugging#from-java9
      # JAVA_DEBUG_OPTS: '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=0.0.0.0:5005'

  http-service-basic-auth:
    image: vdesabou/http-sink-demo
    hostname: http-service-basic-auth
    container_name: http-service-basic-auth
    ports:
      - "9083:8080"
    environment:
      SPRING_PROFILES_ACTIVE: 'basic-auth'

  rest-proxy:
    image: confluentinc/cp-kafka-rest:${TAG}
    depends_on:
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: $SCHEMA_REGISTRY_URL
      KAFKA_REST_CLIENT_BASIC_AUTH_CREDENTIALS_SOURCE: $BASIC_AUTH_CREDENTIALS_SOURCE
      KAFKA_REST_CLIENT_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: $SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO
      KAFKA_REST_BOOTSTRAP_SERVERS: $BOOTSTRAP_SERVERS
      KAFKA_REST_SSL_ENDPOINT_IDENTIFIED_ALGORITHM: "https"
      KAFKA_REST_SECURITY_PROTOCOL: "SASL_SSL"
      KAFKA_REST_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG
      KAFKA_REST_SASL_MECHANISM: "PLAIN"
      KAFKA_REST_CLIENT_BOOTSTRAP_SERVERS: $BOOTSTRAP_SERVERS
      KAFKA_REST_CLIENT_SSL_ENDPOINT_IDENTIFIED_ALGORITHM: "https"
      KAFKA_REST_CLIENT_SECURITY_PROTOCOL: "SASL_SSL"
      KAFKA_REST_CLIENT_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG
      KAFKA_REST_CLIENT_SASL_MECHANISM: "PLAIN"

  streams:
    build:
      context: ../../ccloud/ccloud-demo/streams/
      args:
        TAG: ${TAG}
        CP_BASE_IMAGE: ${CP_BASE_IMAGE}
    hostname: streams
    container_name: streams
    environment:
      BOOTSTRAP_SERVERS: $BOOTSTRAP_SERVERS
      SCHEMA_REGISTRY_URL: $SCHEMA_REGISTRY_URL
      BASIC_AUTH_CREDENTIALS_SOURCE: $BASIC_AUTH_CREDENTIALS_SOURCE
      SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: $SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO
      CLOUD_KEY: $CLOUD_KEY
      CLOUD_SECRET: $CLOUD_SECRET
      JAVA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.12.0.jar=1234:/usr/share/jmx_exporter/kafka-producer.yml -Xmx256M -Xms256M
    volumes:
      - ../../ccloud/ccloud-demo/jmx-exporter:/usr/share/jmx_exporter/

  client-dotnet:
    build:
      context: ../../ccloud/ccloud-demo/client-dotnet/
      args:
        CORE_RUNTIME_TAG: "3.1.2-bionic"
        CORE_SDK_TAG: "3.1.102-bionic"
        CSPROJ_FILE: "CCloud3.1.csproj"
    hostname: client-dotnet
    container_name: client-dotnet
    ports:
      - 7074:7074
      - 7075:7075
    volumes:
      - ../../ccloud/ccloud-demo/client-dotnet/librdkafka.config:/tmp/librdkafka.config

  producer:
    build:
      context: ../../ccloud/ccloud-demo/producer/
    hostname: producer
    container_name: producer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: $BOOTSTRAP_SERVERS
      TOPIC: "customer-avro"
      REPLICATION_FACTOR: 3
      NUMBER_OF_PARTITIONS: 2
      MESSAGE_BACKOFF: 5000 # Frequency of message injection
      KAFKA_ACKS: "all" # default: "1"
      KAFKA_REQUEST_TIMEOUT_MS: 20000
      KAFKA_RETRY_BACKOFF_MS: 500
      KAFKA_CLIENT_ID: "my-java-producer"

      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: "https"
      KAFKA_SASL_MECHANISM: "PLAIN"
      KAFKA_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG
      KAFKA_SECURITY_PROTOCOL: "SASL_SSL"

      KAFKA_SCHEMA_REGISTRY_URL: $SCHEMA_REGISTRY_URL
      KAFKA_BASIC_AUTH_CREDENTIALS_SOURCE: $BASIC_AUTH_CREDENTIALS_SOURCE
      KAFKA_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: $SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO

      KAFKA_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      KAFKA_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: $BOOTSTRAP_SERVERS
      KAFKA_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: "PLAIN"
      KAFKA_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG
      KAFKA_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: "SASL_SSL"

      #KAFKA_ENABLE_IDEMPOTENCE: "true"
      #KAFKA_MAX_IN_FLIGHT_REQUESTS_PER_CONNECTION: "5" # default: 5
      #KAFKA_RETRIES: "10" # default: Integer.MAX_VALUE
      #KAFKA_REQUEST_TIMEOUT_MS: "900" # default: 30000
      #KAFKA_DELIVERY_TIMEOUT_MS: "1000" # default: 120000
      #KAFKA_TRANSACTIONAL_ID: "prod-1"
      JAVA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.12.0.jar=1234:/usr/share/jmx_exporter/kafka-producer.yml -Xmx256M -Xms256M
    volumes:
      - ../../ccloud/ccloud-demo/jmx-exporter:/usr/share/jmx_exporter/
    depends_on:
      - streams

  consumer:
    build:
      context: ../../ccloud/ccloud-demo/consumer/
    hostname: consumer
    container_name: consumer
    environment:
      KAFKA_BOOTSTRAP_SERVERS: $BOOTSTRAP_SERVERS
      TOPIC: "customer-avro"
      KAFKA_GROUP_ID: "customer-avro-app"
      KAFKA_CLIENT_ID: "my-java-consumer"
      CHECK_GAPS: "false"
      COMMIT_STRATEGY: "AUTO_COMMIT" # possible values AUTO_COMMIT or PER_BATCH or PER_MESSAGES
      #KAFKA_ENABLE_AUTO_COMMIT_CONFIG: "false" # default true if group.id is provided
      #KAFKA_ISOLATION_LEVEL_CONFIG: "read_committed" # default read_uncommitted
      # default: org.apache.kafka.clients.consumer.RangeAssignor
      #KAFKA_PARTITION_ASSIGNMENT_STRATEGY_CONFIG: "org.apache.kafka.clients.consumer.CooperativeStickyAssignor"

      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM: "https"
      KAFKA_SASL_MECHANISM: "PLAIN"
      KAFKA_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG
      KAFKA_SECURITY_PROTOCOL: "SASL_SSL"

      KAFKA_SCHEMA_REGISTRY_URL: $SCHEMA_REGISTRY_URL
      KAFKA_BASIC_AUTH_CREDENTIALS_SOURCE: $BASIC_AUTH_CREDENTIALS_SOURCE
      KAFKA_SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO: $SCHEMA_REGISTRY_BASIC_AUTH_USER_INFO

      KAFKA_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      KAFKA_CONFLUENT_MONITORING_INTERCEPTOR_BOOTSTRAP_SERVERS: $BOOTSTRAP_SERVERS
      KAFKA_CONFLUENT_MONITORING_INTERCEPTOR_SASL_MECHANISM: "PLAIN"
      KAFKA_CONFLUENT_MONITORING_INTERCEPTOR_SASL_JAAS_CONFIG: $SASL_JAAS_CONFIG
      KAFKA_CONFLUENT_MONITORING_INTERCEPTOR_SECURITY_PROTOCOL: "SASL_SSL"
      JAVA_OPTS: -javaagent:/usr/share/jmx_exporter/jmx_prometheus_javaagent-0.12.0.jar=1234:/usr/share/jmx_exporter/kafka-consumer.yml -Xmx256M -Xms256M
    volumes:
      - ../../ccloud/ccloud-demo/jmx-exporter:/usr/share/jmx_exporter/
    depends_on:
      - streams

  kafka-lag-exporter:
    image: lightbend/kafka-lag-exporter:0.6.6
    hostname: kafka-lag-exporter
    container_name: kafka-lag-exporter
    restart: always
    volumes:
      - ../../ccloud/ccloud-demo/kafka-lag-exporter/application.conf:/opt/docker/conf/application.conf
      - ../../ccloud/ccloud-demo/kafka-lag-exporter/logback.xml:/opt/docker/conf/logback.xml

  alertmanager:
    image: prom/alertmanager:v0.18.0
    hostname: alertmanager
    container_name: alertmanager
    ports:
      - 9093:9093

  node-exporter:
    image: prom/node-exporter:v0.18.1
    hostname: node-exporter
    container_name: node-exporter
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points'
      - '^(aufs|proc|nsfs|shm|cgroup|tmpfs|binfmt_misc|debugfs|devpts|fusectl|hugetlbfs|fuse.lxcfs|mqueue|pstore|securityfs|sysfs|autofs|devtmpfs|configfs)'

  ccloud_exporter:
    image: dabz/ccloudexporter:latest
    hostname: ccloud_exporter
    container_name: ccloud_exporter
    environment:
      CCLOUD_USER: ${API_KEY_CLOUD}
      CCLOUD_PASSWORD: ${API_SECRET_CLOUD}
    command: -config /conf/config.yml
    volumes:
        - ../../ccloud/ccloud-demo/config.yml:/conf/config.yml

  prometheus:
    image: prom/prometheus
    hostname: prometheus
    container_name: prometheus
    ports:
      - 9090:9090
    volumes:
      - ../../ccloud/ccloud-demo/prometheus/:/etc/prometheus/
    depends_on:
      - node-exporter
      - kafka-lag-exporter
      - alertmanager

  grafana:
    image: grafana/grafana:7.4.1
    hostname: grafana
    container_name: grafana
    environment:
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    ports:
      - 3000:3000
    volumes:
      - ../../ccloud/ccloud-demo/grafana/provisioning/:/etc/grafana/provisioning/
    depends_on:
      - prometheus

  # Splunk Enterprise server:
  splunk:
    image: splunk/splunk:latest
    container_name: splunk
    environment:
      - SPLUNK_START_ARGS=--accept-license
      - SPLUNK_HEC_TOKEN=00000000-0000-0000-0000-0000000000000
      - SPLUNK_PASSWORD=changeme
    ports:
      - 18000:8000
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:8000']
      interval: 5s
      timeout: 5s
      retries: 20
    volumes:
      - ../../ccloud/ccloud-demo/splunk/splunk.yml:/tmp/defaults/default.yml
      - /opt/splunk/var
      - /opt/splunk/etc
  # OpenTelemetry Collector
  otelcollector:
    image: quay.io/signalfx/splunk-otel-collector:0.29.0
    container_name: otelcollector
    command: ["--config=/etc/otel-collector-config.yml", "--log-level=DEBUG"]
    volumes:
      - ../../ccloud/ccloud-demo/splunk/otel-collector-config.yml:/etc/otel-collector-config.yml
    depends_on:
      - splunk
      - ccloud_exporter