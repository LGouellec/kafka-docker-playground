name: CI Self-Managed

on:
  # push:
  #    branches:
  #      - master

  schedule:
      - cron: '0 0 * * 0' # every week on sunday at 0 am

  workflow_dispatch:
    inputs:

jobs:
  start-runner:
    name: Start Github self-hosted runner
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    - name: Start EC2 instance github-actions-runner-vsaboulin
      run: |
        aws ec2 start-instances --instance-ids i-089ef31a75cb3f0e6

  build:
    runs-on: self-hosted
    needs: start-runner # required to start the main job when the runner is read
    name: ${{ matrix.tag }} ${{ matrix.test_list }}
    strategy:
      fail-fast: false
      matrix:
        tag: [ "5.5.6", "6.0.3", "6.1.2", "6.2.1"]
        test_list : [
                      "ðŸš€ connect/connect-mapr-sink",
                    ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-3

      - name: Decrypt secrets.tar
        run: |
          curl --silent --location "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp && sudo mv /tmp/eksctl /usr/local/bin
          ./.github/scripts/decrypt_secret.sh
          tar xvf secrets.tar
          mkdir -p $HOME/.aws
          mv aws_config $HOME/.aws/config
          mv aws_credentials $HOME/.aws/credentials
          mv aws_credentials_with_assuming_iam_role $HOME/.aws/credentials-with-assuming-iam-role
          chmod -R a+rw $HOME/.aws
          mkdir -p $HOME/.ccloud
          mv config.cc.travis $HOME/.ccloud/config
          echo "$DOCKER_PASSWORD" | docker login -u vdesabou --password-stdin
        env:
          SECRETS_ENCRYPTION_PASSWORD: ${{ secrets.SECRETS_ENCRYPTION_PASSWORD }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and Test
        run: bash scripts/run-tests.sh "${{ matrix.test_list }}" "${{ matrix.tag }}"
        env:
          SALESFORCE_USERNAME: ${{ secrets.SALESFORCE_USERNAME }}
          CONSUMER_KEY: ${{ secrets.CONSUMER_KEY }}
          CONSUMER_PASSWORD: ${{ secrets.CONSUMER_PASSWORD }}
          SALESFORCE_INSTANCE: ${{ secrets.SALESFORCE_INSTANCE }}
          SALESFORCE_PASSWORD: ${{ secrets.SALESFORCE_PASSWORD }}
          SECURITY_TOKEN: ${{ secrets.SECURITY_TOKEN }}
          SALESFORCE_USERNAME_ACCOUNT2: ${{ secrets.SALESFORCE_USERNAME_ACCOUNT2 }}
          SALESFORCE_PASSWORD_ACCOUNT2: ${{ secrets.SALESFORCE_PASSWORD_ACCOUNT2 }}
          SECURITY_TOKEN_ACCOUNT2: ${{ secrets.SECURITY_TOKEN_ACCOUNT2 }}
          CONSUMER_KEY_ACCOUNT2: ${{ secrets.CONSUMER_KEY_ACCOUNT2 }}
          CONSUMER_PASSWORD_ACCOUNT2: ${{ secrets.CONSUMER_PASSWORD_ACCOUNT2 }}
          AZ_PASS: ${{ secrets.AZ_PASS }}
          AZ_USER: ${{ secrets.AZ_USER }}
          CCLOUD_EMAIL: ${{ secrets.CCLOUD_EMAIL }}
          CCLOUD_PASSWORD: ${{ secrets.CCLOUD_PASSWORD }}
          CLUSTER_LKC: ${{ secrets.CLUSTER_LKC }}
          DD_API_KEY: ${{ secrets.DD_API_KEY }}
          DD_APP_KEY: ${{ secrets.DD_APP_KEY }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
          ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
          FIREBASE_TOKEN: ${{ secrets.FIREBASE_TOKEN }}
          GITHUB_ACCESS_TOKEN: ${{ secrets.THE_GITHUB_ACCESS_TOKEN }}
          JIRA_URL: ${{ secrets.JIRA_URL }}
          JIRA_USERNAME: ${{ secrets.JIRA_USERNAME }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          REST_KEY: ${{ secrets.REST_KEY }}
          REST_SECRET: ${{ secrets.REST_SECRET }}
          MARKETO_CLIENT_ID: ${{ secrets.MARKETO_CLIENT_ID }}
          MARKETO_ENDPOINT_URL: ${{ secrets.MARKETO_ENDPOINT_URL }}
          MARKETO_CLIENT_SECRET: ${{ secrets.MARKETO_CLIENT_SECRET }}
          PAGERDUTY_SERVICE_ID: ${{ secrets.PAGERDUTY_SERVICE_ID }}
          PAGERDUTY_API_KEY: ${{ secrets.PAGERDUTY_API_KEY }}
          PAGERDUTY_USER_EMAIL: ${{ secrets.PAGERDUTY_USER_EMAIL }}
          SNOWFLAKE_ACCOUNT_NAME: ${{ secrets.SNOWFLAKE_ACCOUNT_NAME }}
          SNOWFLAKE_USERNAME: ${{ secrets.SNOWFLAKE_USERNAME }}
          SNOWFLAKE_PASSWORD: ${{ secrets.SNOWFLAKE_PASSWORD }}
          ZENDESK_URL: ${{ secrets.ZENDESK_URL }}
          ZENDESK_USERNAME: ${{ secrets.ZENDESK_USERNAME }}
          ZENDESK_PASSWORD: ${{ secrets.ZENDESK_PASSWORD }}
          AZURE_TENANT_NAME: "COPS"
          AWS_STS_ROLE_ARN: ${{ secrets.AWS_STS_ROLE_ARN }}
          AWS_ACCOUNT_WITH_ASSUME_ROLE_AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCOUNT_WITH_ASSUME_ROLE_AWS_ACCESS_KEY_ID }}
          AWS_ACCOUNT_WITH_ASSUME_ROLE_AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCOUNT_WITH_ASSUME_ROLE_AWS_SECRET_ACCESS_KEY }}
          SERVICENOW_DEVELOPER_USERNAME: ${{ secrets.SERVICENOW_DEVELOPER_USERNAME }}
          SERVICENOW_DEVELOPER_PASSWORD: ${{ secrets.SERVICENOW_DEVELOPER_PASSWORD }}
          SERVICENOW_URL: ${{ secrets.SERVICENOW_URL }}
          SERVICENOW_PASSWORD: ${{ secrets.SERVICENOW_PASSWORD }}
          CONFLUENT_LICENSE: ${{ secrets.CONFLUENT_LICENSE }}
          DISABLE_KSQLDB: "yes"
          DISABLE_CONTROL_CENTER: "yes"

  stop-runner:
    name: Stop Github self-hosted runner
    needs:
      - start-runner # required to get output from the start-runner job
      - build # required to wait when the main job is done
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    runs-on: ubuntu-latest
    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-3

    - name: Stop EC2 instance github-actions-runner-vsaboulin
      run: |
        aws ec2 stop-instances --instance-ids i-089ef31a75cb3f0e6
